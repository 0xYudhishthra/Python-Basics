+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# 1) Complete the function to return the result of the conversion
def convert_distance(miles):
    km = miles * 1.6   # approximately 1.6 km in 1 mile
    return km
my_trip_miles = 55

# 2) Convert my_trip_miles to kilometers by calling the function above
my_trip_km = convert_distance(my_trip_miles)
km=my_trip_km
# 3) Fill in the blank to print the result of the conversion
print("The distance in kilometers is " + str(km))

# 4) Calculate the round-trip in kilometers by doubling the result,
#    and fill in the blank to print the result
print("The round-trip in kilometers is " + str(km*2))
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

# This function compares two numbers and returns them
# in increasing order.
def order_numbers(number1, number2):
	if number2 > number1:
		return number1, number2
	else:
		return number2, number1

# 1) Fill in the blanks so the print statement displays the result
#    of the function call
smaller, bigger = order_numbers(100, 99)
print(smaller, bigger)

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
def calculate_storage(filesize):
    block_size = 4096
    # Use floor division to calculate how many blocks are fully occupied
    full_blocks = filesize//block_size
    # Use the modulo operator to check whether there's any remainder
    partial_block_remainder = filesize%block_size
    # Depending on whether there's a remainder or not, return
    # the total number of bytes required to allocate enough blocks
    # to store your data.
    if partial_block_remainder > 0:
        return 4096*(full_blocks+1)
    return full_blocks*4096

print(calculate_storage(1))    # Should be 4096
print(calculate_storage(4096)) # Should be 4096
print(calculate_storage(4097)) # Should be 8192
print(calculate_storage(6000)) # Should be 8192

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
